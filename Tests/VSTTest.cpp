#include <JuceHeader.h>
#include "../Libraries/VSTSupport/VSTPluginManager.hpp"
#include <iostream>
#include <string>
#include <thread>
#include <chrono>

int main() {
    std::cout << "WindsynthRecorder VST Test Application" << std::endl;
    std::cout << "=======================================" << std::endl;

    try {
        // ÂàõÂª∫VSTÊèí‰ª∂ÁÆ°ÁêÜÂô®
        std::cout << "ÂàõÂª∫VSTÊèí‰ª∂ÁÆ°ÁêÜÂô®..." << std::endl;
        WindsynthVST::VSTPluginManager pluginManager;

        // ËÆæÁΩÆÂõûË∞É
        pluginManager.setScanProgressCallback([](const std::string& pluginName, float progress) {
            std::cout << "Êâ´ÊèèËøõÂ∫¶: " << (progress * 100.0f) << "% - " << pluginName << std::endl;
        });

        pluginManager.setErrorCallback([](const std::string& error) {
            std::cout << "ÈîôËØØ: " << error << std::endl;
        });

        std::cout << "VSTÊèí‰ª∂ÁÆ°ÁêÜÂô®ÂàõÂª∫ÊàêÂäü!" << std::endl;

        // ÂºÄÂßãÊâ´ÊèèÊèí‰ª∂
        std::cout << "\nÂºÄÂßãÊâ´ÊèèVSTÊèí‰ª∂..." << std::endl;
        pluginManager.scanForPlugins();

        // Á≠âÂæÖÊâ´ÊèèÂÆåÊàê
        while (pluginManager.isScanning()) {
            juce::Thread::sleep(100);
        }

        // ÊòæÁ§∫Êâ´ÊèèÁªìÊûú
        int numPlugins = pluginManager.getNumAvailablePlugins();
        std::cout << "\nÊâ´ÊèèÂÆåÊàê! ÊâæÂà∞ " << numPlugins << " ‰∏™Êèí‰ª∂:" << std::endl;

        std::vector<WindsynthVST::VSTPluginInfo> plugins = pluginManager.getAvailablePlugins();
        for (size_t i = 0; i < plugins.size() && i < 10; ++i) { // Âè™ÊòæÁ§∫Ââç10‰∏™
            const WindsynthVST::VSTPluginInfo& plugin = plugins[i];
            std::cout << (i + 1) << ". " << plugin.name
                     << " (" << plugin.manufacturer << ")"
                     << " - " << plugin.category << std::endl;
        }

        if (plugins.size() > 10) {
            std::cout << "... ËøòÊúâ " << (plugins.size() - 10) << " ‰∏™Êèí‰ª∂" << std::endl;
        }

        // ‰∏ìÈó®ÊµãËØïiZotopeÊèí‰ª∂Âä†ËΩΩ
        std::cout << "\nÂºÄÂßãÊµãËØïiZotopeÊèí‰ª∂Âä†ËΩΩ..." << std::endl;

        if (!plugins.empty()) {
            // ÂØªÊâæiZotopeÊèí‰ª∂ËøõË°åÊµãËØï
            WindsynthVST::VSTPluginInfo testPlugin;
            bool foundIzotopePlugin = false;

            // ÂØªÊâæiZotopeÊèí‰ª∂Ôºå‰ºòÂÖàÈÄâÊã©ÁÆÄÂçïÁöÑ
            for (size_t i = 0; i < plugins.size(); ++i) {
                const auto& plugin = plugins[i];
                if (plugin.manufacturer == "iZotope") {
                    // ‰ºòÂÖàÈÄâÊã©ClipperÊàñGateÁ≠âÁõ∏ÂØπÁÆÄÂçïÁöÑÊèí‰ª∂
                    if (plugin.name.find("Clipper") != std::string::npos ||
                        plugin.name.find("Gate") != std::string::npos ||
                        plugin.name.find("Phase") != std::string::npos) {
                        testPlugin = plugin;
                        foundIzotopePlugin = true;
                        break;
                    }
                    // Â¶ÇÊûúÊ≤°ÊâæÂà∞ÁÆÄÂçïÁöÑÔºåËÆ∞ÂΩïÁ¨¨‰∏Ä‰∏™iZotopeÊèí‰ª∂
                    if (!foundIzotopePlugin) {
                        testPlugin = plugin;
                        foundIzotopePlugin = true;
                    }
                }
            }

            if (!foundIzotopePlugin) {
                std::cout << "Êú™ÊâæÂà∞iZotopeÊèí‰ª∂Ôºå‰ΩøÁî®Á¨¨‰∏Ä‰∏™Êèí‰ª∂ËøõË°åÊµãËØï" << std::endl;
                testPlugin = plugins[0];
            }

            std::cout << "Â∞ùËØïÂºÇÊ≠•Âä†ËΩΩiZotopeÊèí‰ª∂: " << testPlugin.name
                     << " (" << testPlugin.pluginFormatName << ")" << std::endl;

            // ‰ΩøÁî®ÂºÇÊ≠•Âä†ËΩΩÔºåËøôÊòØÂ§ÑÁêÜÂ§çÊùÇÊèí‰ª∂ÁöÑÊ≠£Á°ÆÊñπÂºè
            bool loadingComplete = false;
            std::string loadResult;
            std::unique_ptr<WindsynthVST::VSTPluginInstance> loadedInstance;

            auto startTime = std::chrono::steady_clock::now();

            pluginManager.loadPluginAsync(testPlugin,
                [&](std::unique_ptr<WindsynthVST::VSTPluginInstance> instance, const std::string& error) {
                    auto endTime = std::chrono::steady_clock::now();
                    auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(endTime - startTime);
                    std::cout << "ÂºÇÊ≠•Âä†ËΩΩËÄóÊó∂: " << duration.count() << "ms" << std::endl;

                    if (instance) {
                        std::cout << "‚úÖ iZotopeÊèí‰ª∂ÂºÇÊ≠•Âä†ËΩΩÊàêÂäü!" << std::endl;
                        std::cout << "Êèí‰ª∂ÂêçÁß∞: " << instance->getName() << std::endl;
                        std::cout << "ÂèÇÊï∞Êï∞Èáè: " << instance->getNumParameters() << std::endl;
                        std::cout << "ÊúâÁºñËæëÂô®: " << (instance->hasEditor() ? "ÊòØ" : "Âê¶") << std::endl;

                        // ÊµãËØïÂü∫Êú¨ÂäüËÉΩ
                        if (instance->getNumParameters() > 0) {
                            std::cout << "Á¨¨‰∏Ä‰∏™ÂèÇÊï∞ÂêçÁß∞: " << instance->getParameterName(0) << std::endl;
                            std::cout << "Á¨¨‰∏Ä‰∏™ÂèÇÊï∞ÂÄº: " << instance->getParameter(0) << std::endl;
                        }

                        loadedInstance = std::move(instance);
                        loadResult = "ÊàêÂäü";
                    } else {
                        std::cout << "‚ùå iZotopeÊèí‰ª∂ÂºÇÊ≠•Âä†ËΩΩÂ§±Ë¥•: " << error << std::endl;
                        loadResult = "Â§±Ë¥•: " + error;
                    }

                    loadingComplete = true;
                });

            // Á≠âÂæÖÂºÇÊ≠•Âä†ËΩΩÂÆåÊàê
            int waitCount = 0;
            const int maxWaitSeconds = 30; // Â¢ûÂä†Âà∞30ÁßíÔºåÂõ†‰∏∫iZotopeÊèí‰ª∂ÂèØËÉΩÈúÄË¶ÅÊõ¥ÈïøÊó∂Èó¥
            while (!loadingComplete && waitCount < maxWaitSeconds * 10) {
                // ÁÆÄÂçïÁ≠âÂæÖÔºåÂºÇÊ≠•ÂõûË∞É‰ºöÂú®ÂêéÂè∞Â§ÑÁêÜ
                std::this_thread::sleep_for(std::chrono::milliseconds(100));
                waitCount++;
                if (waitCount % 50 == 0) { // ÊØè5ÁßíÊä•Âëä‰∏ÄÊ¨°
                    std::cout << "Á≠âÂæÖiZotopeÊèí‰ª∂Âä†ËΩΩ... (" << waitCount/10 << "Áßí)" << std::endl;
                }
            }

            if (!loadingComplete) {
                std::cout << "‚ùå iZotopeÊèí‰ª∂Âä†ËΩΩË∂ÖÊó∂!" << std::endl;
            } else {
                std::cout << "iZotopeÊèí‰ª∂Âä†ËΩΩÁªìÊûú: " << loadResult << std::endl;
                if (loadedInstance) {
                    std::cout << "üéâ ÊàêÂäüÂä†ËΩΩiZotopeÊèí‰ª∂ÔºåÂèØ‰ª•ËøõË°åÈü≥È¢ëÂ§ÑÁêÜ!" << std::endl;
                }
            }
        } else {
            std::cout << "Ê≤°ÊúâÊâæÂà∞ÂèØÁî®Êèí‰ª∂ËøõË°åÊµãËØï" << std::endl;
        }

        std::cout << "\niZotopeÊèí‰ª∂ÂºÇÊ≠•Âä†ËΩΩÊµãËØïÂÆåÊàê!" << std::endl;
        
    } catch (const std::exception& e) {
        std::cout << "ÂºÇÂ∏∏: " << e.what() << std::endl;
        return 1;
    }
    
    return 0;
}
